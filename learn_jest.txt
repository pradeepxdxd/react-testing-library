@Jest vs React Testing Library:-
A. Jest:- Jest is a js testing library framework. Jest is a test runner that finds tests, runs the tests, determines whether the tests passed or failed and reports it back in a human readable manner.

B. RTL:- React Testing Library provides a virtual DOM which we can use to interact with and test the react component.
Testing Library is infact a family of packages which helps test UI components.
The coew library is called DOM Testing library and RTL is simply a wrapper around this core library to test React applications in an easier way.

@Test types :-
A. Unit Test :- 
 1. Focus is on testing the individual building blocks of an application such as a class or a function or a component.
 2. Each unit or building block is tested in isolation.
	.^.means :- har ek unit alag alag test hota hai.
B. Integration Test :-
 1. Focus is on testing a combination of units and ensuring they work together.
 2. Take longer than unit tests
 	.^.means :- like 3 units of component ek saath test ho rhe he.
C. E2E Test(End-To-End Test) :-
 1 Focusing on testing entire application flow & ensureing works as designed from start to finish.
 2 Take the longest as they cover the most amount of code.
	.^.means :- pura test krta hai code to uper se niche tak.

@Test Driven Development:-
Test Driven Development is a software development process where you write tests before writing the software code. 

@Group Test:-
describe('group name', () => {})

@Filename Convention :-
A. xyz.test.jsx
B. xyz.spec.jsx
C. __tests__ / xyz.test.jsx

@Code Coverage:-
A metric that can you understand how much of your software code is tested.
	1. Statement coverage:- how many of the statements in the software code have been executed.
	2. Branches coverage:- how many of the branches of the control structures have been executed.
	3. Funtion coverage:- how many of the functions defined have been called and finally
	4. Line coverage:- how many of lines of source code have been tested.

	package.json :- "coverage":"npm test coverage"

@Assertion:-
When writing tests, we often need to check that values meet certain conditions. Assertions decide if a test passes or fails.
	1. expect :- expect(value)
	A. The argument should be the value that your code produces.
	B. Typically, you will ue expect along with a "matcher" funtion (eg. toBeInTheDocument()) to assert 	   something about a value.
	C. A matcher can optionally accept an argument which is the correct expected value.

@RTL Queries:-
Queries are the method that Testing Library provides to find elements on the page.
1. To find a single element on the page, we have
	getBy..., queryBy..., findBy...
2. To find multiple elements on the page, we have
	getAllBy..., queryAllBy..., findAllBy...
3. The suffix can be one of Role, LabelText, PlaceHolderText, Text, DisplayValue, AltText, Title and finally TestId.

@getByRole:-
By default, many sementic elements in HTML have a role.
Button element has a button role, anchore element has a link role, h1 to h6 elements have a heading role, checkbox role, radio buttons have a radio role and so on.
If you are working with elements that do not have a default role or if you want to specify a different role, the rolw attribute can be used to add the desired role.
To use an anchor element as a button in the navbar, you can add role="button" 

@Priority Order for Queries:-
1. getByRole
2. getByLabelText
3. getByPlaceholderText
4. getByText
5. getByDisplayValue
6. getByAltText
7. getByTitle
8. getByTestId

@Pointer Interactions:-
Convenience APIs
	1. click()
	2. dblClick()
	3. tripleClick()
	4. hover()
	5. unhover()
Pointer APIs
	1. pointer({keys:'[MouseLeft]'}) :- when only left mouse click
	2. pointer({key:'[MouseLeft][MouseRight]'})
	3. pointer('[MouseLeft][MouseRight]')
	4. pointer('[MouseLeft>]') :- press a button without releasing it
	5. pointer('[/MouseLeft]') :- just releasing it the previous pressed button
